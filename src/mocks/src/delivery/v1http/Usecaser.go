// Code generated by mockery v2.44.1. DO NOT EDIT.

package v1http

import (
	model "sagala-todo/src/model"

	mock "github.com/stretchr/testify/mock"
)

// Usecaser is an autogenerated mock type for the Usecaser type
type Usecaser struct {
	mock.Mock
}

type Usecaser_Expecter struct {
	mock *mock.Mock
}

func (_m *Usecaser) EXPECT() *Usecaser_Expecter {
	return &Usecaser_Expecter{mock: &_m.Mock}
}

// DeleteTask provides a mock function with given fields: taskId, isHardDelete
func (_m *Usecaser) DeleteTask(taskId string, isHardDelete bool) error {
	ret := _m.Called(taskId, isHardDelete)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(taskId, isHardDelete)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecaser_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type Usecaser_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - taskId string
//   - isHardDelete bool
func (_e *Usecaser_Expecter) DeleteTask(taskId interface{}, isHardDelete interface{}) *Usecaser_DeleteTask_Call {
	return &Usecaser_DeleteTask_Call{Call: _e.mock.On("DeleteTask", taskId, isHardDelete)}
}

func (_c *Usecaser_DeleteTask_Call) Run(run func(taskId string, isHardDelete bool)) *Usecaser_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(bool))
	})
	return _c
}

func (_c *Usecaser_DeleteTask_Call) Return(err error) *Usecaser_DeleteTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Usecaser_DeleteTask_Call) RunAndReturn(run func(string, bool) error) *Usecaser_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: taskId
func (_m *Usecaser) GetTask(taskId string) (model.TaskPresenter, error) {
	ret := _m.Called(taskId)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 model.TaskPresenter
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.TaskPresenter, error)); ok {
		return rf(taskId)
	}
	if rf, ok := ret.Get(0).(func(string) model.TaskPresenter); ok {
		r0 = rf(taskId)
	} else {
		r0 = ret.Get(0).(model.TaskPresenter)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(taskId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecaser_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type Usecaser_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - taskId string
func (_e *Usecaser_Expecter) GetTask(taskId interface{}) *Usecaser_GetTask_Call {
	return &Usecaser_GetTask_Call{Call: _e.mock.On("GetTask", taskId)}
}

func (_c *Usecaser_GetTask_Call) Run(run func(taskId string)) *Usecaser_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Usecaser_GetTask_Call) Return(record model.TaskPresenter, err error) *Usecaser_GetTask_Call {
	_c.Call.Return(record, err)
	return _c
}

func (_c *Usecaser_GetTask_Call) RunAndReturn(run func(string) (model.TaskPresenter, error)) *Usecaser_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetTasks provides a mock function with given fields: limit, offset, search, status
func (_m *Usecaser) GetTasks(limit *int, offset *int, search *string, status *string) ([]model.TaskPresenter, int, error) {
	ret := _m.Called(limit, offset, search, status)

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []model.TaskPresenter
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(*int, *int, *string, *string) ([]model.TaskPresenter, int, error)); ok {
		return rf(limit, offset, search, status)
	}
	if rf, ok := ret.Get(0).(func(*int, *int, *string, *string) []model.TaskPresenter); ok {
		r0 = rf(limit, offset, search, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TaskPresenter)
		}
	}

	if rf, ok := ret.Get(1).(func(*int, *int, *string, *string) int); ok {
		r1 = rf(limit, offset, search, status)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*int, *int, *string, *string) error); ok {
		r2 = rf(limit, offset, search, status)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Usecaser_GetTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTasks'
type Usecaser_GetTasks_Call struct {
	*mock.Call
}

// GetTasks is a helper method to define mock.On call
//   - limit *int
//   - offset *int
//   - search *string
//   - status *string
func (_e *Usecaser_Expecter) GetTasks(limit interface{}, offset interface{}, search interface{}, status interface{}) *Usecaser_GetTasks_Call {
	return &Usecaser_GetTasks_Call{Call: _e.mock.On("GetTasks", limit, offset, search, status)}
}

func (_c *Usecaser_GetTasks_Call) Run(run func(limit *int, offset *int, search *string, status *string)) *Usecaser_GetTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*int), args[1].(*int), args[2].(*string), args[3].(*string))
	})
	return _c
}

func (_c *Usecaser_GetTasks_Call) Return(records []model.TaskPresenter, totalData int, err error) *Usecaser_GetTasks_Call {
	_c.Call.Return(records, totalData, err)
	return _c
}

func (_c *Usecaser_GetTasks_Call) RunAndReturn(run func(*int, *int, *string, *string) ([]model.TaskPresenter, int, error)) *Usecaser_GetTasks_Call {
	_c.Call.Return(run)
	return _c
}

// PostTask provides a mock function with given fields: payload
func (_m *Usecaser) PostTask(payload model.TaskDTO) (string, error) {
	ret := _m.Called(payload)

	if len(ret) == 0 {
		panic("no return value specified for PostTask")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(model.TaskDTO) (string, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(model.TaskDTO) string); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(model.TaskDTO) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecaser_PostTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostTask'
type Usecaser_PostTask_Call struct {
	*mock.Call
}

// PostTask is a helper method to define mock.On call
//   - payload model.TaskDTO
func (_e *Usecaser_Expecter) PostTask(payload interface{}) *Usecaser_PostTask_Call {
	return &Usecaser_PostTask_Call{Call: _e.mock.On("PostTask", payload)}
}

func (_c *Usecaser_PostTask_Call) Run(run func(payload model.TaskDTO)) *Usecaser_PostTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.TaskDTO))
	})
	return _c
}

func (_c *Usecaser_PostTask_Call) Return(taskId string, err error) *Usecaser_PostTask_Call {
	_c.Call.Return(taskId, err)
	return _c
}

func (_c *Usecaser_PostTask_Call) RunAndReturn(run func(model.TaskDTO) (string, error)) *Usecaser_PostTask_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function with given fields: taskId, payload
func (_m *Usecaser) UpdateTask(taskId string, payload model.TaskDTO) error {
	ret := _m.Called(taskId, payload)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.TaskDTO) error); ok {
		r0 = rf(taskId, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecaser_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type Usecaser_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - taskId string
//   - payload model.TaskDTO
func (_e *Usecaser_Expecter) UpdateTask(taskId interface{}, payload interface{}) *Usecaser_UpdateTask_Call {
	return &Usecaser_UpdateTask_Call{Call: _e.mock.On("UpdateTask", taskId, payload)}
}

func (_c *Usecaser_UpdateTask_Call) Run(run func(taskId string, payload model.TaskDTO)) *Usecaser_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(model.TaskDTO))
	})
	return _c
}

func (_c *Usecaser_UpdateTask_Call) Return(err error) *Usecaser_UpdateTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Usecaser_UpdateTask_Call) RunAndReturn(run func(string, model.TaskDTO) error) *Usecaser_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsecaser creates a new instance of Usecaser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecaser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecaser {
	mock := &Usecaser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
